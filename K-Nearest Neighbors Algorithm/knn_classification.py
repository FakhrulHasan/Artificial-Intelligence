# -*- coding: utf-8 -*-
"""KNN_CLASSIFICATION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RrKGJuhgUDChsqIufXZmn6N69xJmOZYR
"""

from numpy import genfromtxt

data_path = 'iris.csv'
my_data = genfromtxt(data_path, delimiter=',')

type(my_data)

data = my_data.tolist()
for i in range(5):
  print(data[i])
type(data)

import random
train_set=[]
validation_set=[]
test_set=[]
random.shuffle(data)
print(data)

#Split data set
for S in data:
  R=random.uniform(0,1)
  if R>=0 and R<=0.7 and len(train_set)/len(data)<=0.7 :
    train_set.append(S)
  elif R>0.7 and R<=0.85 and len(validation_set)/len(data)<=0.15 :
    validation_set.append(S)
  elif R>0.85 and R<=1 and len(test_set)/len(data) <= 0.15:
    test_set.append(S)

print(len(train_set)/len(data))
print(len(validation_set)/len(data))
print(len(test_set)/len(data))

# Validation Check
import math
K=15
cnt=0
for V in validation_set:
  l=[]
  for T in train_set:
    dist=math.sqrt((V[0]-T[0])**2+(V[1]-T[1])**2+(V[2]-T[2])**2+(V[3]-T[3])**2)
    l.append([dist,t])
  l.sort()
  l=l[:K]
  #print(l)
  
  majority_class=[]
  for i in range(K):
    majority_class.append(l[i][1][-1])
  #print(majority_class)
  clas=max(majority_class,key=majority_class.count)
  if V[-1]==clas:
    cnt+=1
    

accuracy=(cnt/len(validation_set))*100
print(accuracy)

#Test case Check
import math
K=1
cnt=0
for V in validation_set:
  l=[]
  for T in train_set:
    dist=math.sqrt((V[0]-T[0])**2+(V[1]-T[1])**2+(V[2]-T[2])**2+(V[3]-T[3])**2)
    l.append([dist,t])
  l.sort()
  l=l[:K]
  #print(l)
  
  majority_class=[]
  for i in range(K):
    majority_class.append(l[i][1][-1])
  #print(majority_class)
  clas=max(majority_class,key=majority_class.count)
  if V[-1]==clas:
    cnt+=1
    

accuracy=(cnt/len(test_set))*100
print(accuracy)